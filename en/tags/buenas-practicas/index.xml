<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Buenas-Practicas on Exeal</title><link>https://www.exeal.com/en/tags/buenas-practicas/</link><description>Recent content in Buenas-Practicas on Exeal</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 15 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/en/tags/buenas-practicas/index.xml" rel="self" type="application/rss+xml"/><item><title>The Foundation of Continuous Integration: Micro-Commits</title><link>https://www.exeal.com/en/blog/2023/12/the-foundation-of-continuous-integration-micro-commits/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/en/blog/2023/12/the-foundation-of-continuous-integration-micro-commits/</guid><description>&lt;p>You might be surprised (it surprised me when I began &lt;a href="https://www.exeal.com/">helping other teams as a coach&lt;/a>), but most developers commit code to version control only about 2 or 3 times a week.&lt;/p>
&lt;p>This limits the frequency with which they can deliver working code to production.&lt;/p>
&lt;p>When our goal is to increase the frequency of delivering value and, therefore, practice &lt;em>trunk-based development&lt;/em>, &lt;em>continuous integration&lt;/em>, and &lt;em>continuous delivery&lt;/em>, we seek the opposite: &lt;strong>to accelerate the frequency of our commits, as much as possible&lt;/strong>.&lt;/p></description></item><item><title>Deliberate Practice: An Alternative Way to Learn TDD</title><link>https://www.exeal.com/en/blog/2023/10/deliberate-practice-an-alternative-way-to-learn-tdd/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/en/blog/2023/10/deliberate-practice-an-alternative-way-to-learn-tdd/</guid><description>&lt;p>Have you ever &lt;strong>found yourself stuck&lt;/strong> while practicing TDD, refactoring, software design, or any other programming-related skill?&lt;/p>
&lt;p>Do you feel like you&amp;rsquo;ve run out of katas to solve, and the ones available are too simple?&lt;/p>
&lt;p>Perhaps it&amp;rsquo;s because &lt;strong>you&amp;rsquo;re practicing with the wrong approach&lt;/strong>.&lt;/p>
&lt;p>To get the most out of practicing with katas, we need to employ a very specific practice technique: &lt;a href="https://jamesclear.com/deliberate-practice-theory">deliberate practice&lt;/a>.&lt;/p>
&lt;h2 id="what-is-deliberate-practice">What is deliberate practice?&lt;/h2>
&lt;p>Deliberate practice is a method for &lt;strong>practicing any skill&lt;/strong>, especially those that require repetition to master a technique. It involves:&lt;/p></description></item><item><title>How to write the first test using TDD</title><link>https://www.exeal.com/en/blog/2023/10/how-to-write-the-first-test-using-tdd/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/en/blog/2023/10/how-to-write-the-first-test-using-tdd/</guid><description>&lt;p>The first test is one of the most important steps when we develop using TDD. It&amp;rsquo;s the one that will determine whether we build our solution on solid foundations or unnecessarily complicate our lives.&lt;/p>
&lt;p>There are three main things I ask of my first test:&lt;/p>
&lt;ol>
&lt;li>Firstly, it should lay out the most important elements that will come into play, or the inputs and outputs of the system (a.k.a. the simplest &amp;ldquo;given&amp;rdquo;).&lt;/li>
&lt;li>Secondly, it should define how I will interact with the system, its facade, i.e., what is the public interface of my module or class (a.k.a. the simplest &amp;ldquo;when&amp;rdquo;).&lt;/li>
&lt;li>Thirdly, it should capture the behavior of the simplest case involving all elements, or the simplest inputs and outputs (a.k.a. the simplest &amp;ldquo;then&amp;rdquo;).&lt;/li>
&lt;/ol>
&lt;p>The aim here is to define the interfaces of all the pieces that will come into play and make them work as soon as possible with a very simple case, making it easier to incrementally grow the solution by adding more tests later.&lt;/p></description></item><item><title>How to Slice Requirements to Continuously Deliver Value: Vertical Slicing</title><link>https://www.exeal.com/en/blog/2023/10/how-to-slice-requirements-to-continuously-deliver-value-vertical-slicing/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/en/blog/2023/10/how-to-slice-requirements-to-continuously-deliver-value-vertical-slicing/</guid><description>&lt;p>When working on a software project of a certain size, we have to divide (slice, or &amp;ldquo;slice&amp;rdquo;) larger requirements into smaller, more manageable tasks.&lt;/p>
&lt;p>There are two ways to do this division: horizontal slicing and vertical slicing.&lt;/p>
&lt;p>When we do horizontal slicing, we divide by a technical criterion (usually layers). We have one task for the front end, another for the back end, another for the database, etc.&lt;/p>
&lt;p>This approach presents us with 2 problems&lt;/p></description></item></channel></rss>