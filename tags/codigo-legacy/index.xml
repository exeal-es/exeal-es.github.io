<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Codigo-Legacy on Exeal</title><link>https://www.exeal.com/tags/codigo-legacy/</link><description>Recent content in Codigo-Legacy on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Thu, 10 Nov 2022 00:07:00 +0100</lastBuildDate><atom:link href="https://www.exeal.com/tags/codigo-legacy/index.xml" rel="self" type="application/rss+xml"/><item><title>Prepara tu código para lo que venga con Reflective Design</title><link>https://www.exeal.com/blog/2022/08/reflective-design/</link><pubDate>Thu, 10 Nov 2022 00:07:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/08/reflective-design/</guid><description>&lt;p>¿Por qué los proyectos greenfield acaban convirtiéndose poco a poco en código legacy, difícil de extender y mantener?&lt;/p>
&lt;p>En un &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> comentábamos que existen fuerzas, como los requisitos cambiantes, los deadlines, o la naturaleza social del desarrollo de software, que hace que &lt;strong>el código de nuestros proyectos poco a poco se vaya deteriorando si no hacemos nada al respecto&lt;/strong>. Por tanto, como desarrolladores debemos ejercer fuerzas opuestas para contrarrestar este efecto.&lt;/p></description></item><item><title>Characterization Tests</title><link>https://www.exeal.com/blog/2021/10/characterization-test/</link><pubDate>Thu, 21 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/characterization-test/</guid><description>&lt;h2 id="characterization-tests">Characterization Tests&lt;/h2>
&lt;p>¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach en &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy me gustaría intentar explicarles para qué sirven los tests de caracterización.&lt;/p>
&lt;h2 id="qué-son-">¿Qué son? &amp;hellip;&lt;/h2>
&lt;p>Cuando trabajamos con código legacy, los tests de caracterización pueden ser una excelente herramienta para afrontar futuros refactors, ya que son tests automatizados que permiten tener un respaldo al momento de querer refactorizar un determinado componente de nuestra aplicación.
Hay que tener en cuenta algo muy &lt;strong>importante&lt;/strong>, los tests de caracterización serán un gran apoyo a la hora de realizar cambios, pero estos tipos de tests verifican el &lt;strong>comportamiento actual&lt;/strong> no el &lt;strong>comportamiento deseado&lt;/strong>.&lt;/p></description></item><item><title>Strangler fig pattern</title><link>https://www.exeal.com/blog/2021/10/strangler-fig-pattern/</link><pubDate>Sun, 03 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/strangler-fig-pattern/</guid><description>&lt;h2 id="mi-primer-blog">Mi primer blog&lt;/h2>
&lt;p>¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach de &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy vengo a comentarles nuestra experiencia aplicando &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler-fig">Strangler fig pattern&lt;/a>.&lt;/p>
&lt;h2 id="antes-de-comenzar-">Antes de comenzar &amp;hellip;&lt;/h2>
&lt;p>Me gustaría explicarles brevemente en qué consiste esta técnica de refactoring. Strangler fig pattern es un técnica que nos permitirá &lt;strong>migrar&lt;/strong> nuestro actual software a otro anteponiendo un proxy que nos ayudará a &lt;strong>migrar&lt;/strong> poco a poco nuestro código obsoleto a nuestro nuevo software.&lt;/p></description></item><item><title>¿Por qué el código degenera?</title><link>https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/</link><pubDate>Fri, 26 Mar 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/</guid><description>&lt;p>En mi &lt;a href="https://www.exeal.com/cursos/rescata-tu-proyecto/">training sobre código legacy&lt;/a>, suelo empezar preguntando a la gente que “qué es lo que caracteriza un código legacy”, y hay una constante que siempre sale en todos los equipos: &lt;strong>el código legacy da miedo, porque tocarlo supone un riesgo&lt;/strong>. Riesgo de romper algo que antes funcionaba, que está dando dinero, que está pagando las facturas… y deje de funcionar.&lt;/p>
&lt;p>Existe una concepción negativa sobre el código legacy: como desarrolladores, tendemos a evitar este tipo de proyectos. Si nos dan a elegir, preferimos trabajar en el equipo que está desarrollando el nuevo producto de la empresa, con tecnologías cloud, serverless, contenedores, microservicios, etc., antes que mantener el monolito legacy de 1 millón de líneas de código (cuando, irónicamente, es éste el que paga las facturas).&lt;/p></description></item></channel></rss>