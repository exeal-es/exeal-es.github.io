<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>refactoring on Exeal</title><link>https://www.exeal.com/tags/refactoring/</link><description>Recent content in refactoring on Exeal</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Fri, 23 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Lift Pass Pricing Kata</title><link>https://www.exeal.com/katas/lift-pass-pricing-kata/</link><pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/lift-pass-pricing-kata/</guid><description>Tu tarea Esta aplicación resuelve el problema de calcular el precio de los forfaits, es decir, los pases para acceder a esquiar. Existe una lógica intrincada vinculada al tipo de forfait que deseas, tu edad y la fecha específica en la que te gustaría esquiar.
Se pide implementar una nueva funcionalidad: poder obtener el precio de varios forfaits, no solo uno.
Actualmente, el precio de un solo forfait está implementado; desafortunadamente, el código tal como está diseñado no es reutilizable.</description></item><item><title>Parrot Refactoring Kata</title><link>https://www.exeal.com/katas/parrot-refactoring-kata/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/parrot-refactoring-kata/</guid><description>Tu tarea ¿Puedes detectar algún &amp;ldquo;code smell&amp;rdquo; en este código? Te daré una pista, el problema más evidente se engloba dentro de la categoría de Object orientation abusers.
Cómo resolverla Descarga el código inicial aquí, y elige el lenguaje en el que desees resolver la kata: https://github.com/emilybache/Parrot-Refactoring-Kata
Refactoriza el código aplicando los movimientos de la receta &amp;ldquo;Reemplazar condicional con polimorfismo&amp;rdquo;, dando pequeños pasos, y ejecutando los tests con frecuencia. Intenta no modificar el código de producción y el código de tests a la vez y, sobre todo, mantener los tests en verde en todo momento.</description></item><item><title>Trip Service Kata</title><link>https://www.exeal.com/katas/trip-service-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/trip-service-kata/</guid><description>Tu tarea El código de inicio de esta kata consiste en un servicio (TripService) que no está testeado. El código contiene dos dependencias que evitan que añadamos tests correctamente.
Nuestras tareas con este código son:
Desacoplar las dependencias que impiden cubrir el código con tests. Añadir tests de caracterización para todos los casos necesarios. Refactorizar el código resultante para mejorar la legibilidad. Reglas:
No podemos cambiar ningún código existente si no está cubierto por tests.</description></item><item><title>Prepara tu código para lo que venga con Reflective Design</title><link>https://www.exeal.com/blog/2022/08/reflective-design/</link><pubDate>Thu, 10 Nov 2022 00:07:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/08/reflective-design/</guid><description>¿Por qué los proyectos greenfield acaban convirtiéndose poco a poco en código legacy, difícil de extender y mantener?
En un anterior post comentábamos que existen fuerzas, como los requisitos cambiantes, los deadlines, o la naturaleza social del desarrollo de software, que hace que el código de nuestros proyectos poco a poco se vaya deteriorando si no hacemos nada al respecto. Por tanto, como desarrolladores debemos ejercer fuerzas opuestas para contrarrestar este efecto.</description></item><item><title>Transformation Priority Premise</title><link>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</link><pubDate>Sun, 07 Aug 2022 23:10:00 +0000</pubDate><guid>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</guid><description>El tio bob lleva muchos años diciendo que mientras las pruebas son más específicas, el código se hace más genérico. Y es que de tanto refactorizar, de tanto modificar el código con esas pequeñas mejoras de estructura sin cambiar su comportamiento exterior, van ocurriendo transformaciones en el código de producción que parecen seguir un cierto camino ordenado.
Esto parece generar una lista de transformaciones ordenada que nos puede servir de guía para alcanzar una implementación más genérica.</description></item><item><title>Characterization Tests</title><link>https://www.exeal.com/blog/2021/10/characterization-test/</link><pubDate>Thu, 21 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/characterization-test/</guid><description>Characterization Tests ¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach en Exeal, y hoy me gustaría intentar explicarles para qué sirven los tests de caracterización.
¿Qué son? &amp;hellip; Cuando trabajamos con código legacy, los tests de caracterización pueden ser una excelente herramienta para afrontar futuros refactors, ya que son tests automatizados que permiten tener un respaldo al momento de querer refactorizar un determinado componente de nuestra aplicación.</description></item><item><title>Strangler fig pattern</title><link>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</link><pubDate>Sun, 03 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</guid><description>Mi primer blog ¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach de Exeal, y hoy vengo a comentarles nuestra experiencia aplicando Strangler fig pattern.
Antes de comenzar &amp;hellip; Me gustaría explicarles brevemente en qué consiste esta técnica de refactoring. Strangler fig pattern es un técnica que nos permitirá migrar nuestro actual software a otro anteponiendo un proxy que nos ayudará a migrar poco a poco nuestro código obsoleto a nuestro nuevo software.</description></item><item><title>Hábitos de productividad como programadores</title><link>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</link><pubDate>Sun, 18 Apr 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</guid><description>En el anterior post de esta serie sobre cómo evitar que el código greenfield se convierta en legacy, hablábamos de que una de las áreas en las que podíamos trabajar era en mejorar nuestras competencias y habilidades como desarrolladores para ser más productivo.
En mi experiencia haciendo coaching a equipos, uno de los primeros grandes saltos cualitativos para la mayoría de ellos es aprender a usar correctamente las herramientas de nuestro día a día.</description></item></channel></rss>