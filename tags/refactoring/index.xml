<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on Exeal</title><link>https://www.exeal.com/tags/refactoring/</link><description>Recent content in Refactoring on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Tue, 27 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring Golf</title><link>https://www.exeal.com/katas/refactoring-golf/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/refactoring-golf/</guid><description>&lt;p>Refactoring Golf es un ejercicio pr√°ctico pensado para fortalecer tu habilidad de refactorizar c√≥digo y descubrir hasta d√≥nde puede ayudarte tu IDE mediante atajos y automatizaciones. Partir√°s de un conjunto de peque√±os proyectos ‚Äï los ¬´Holes¬ª ‚Äï donde cada Hole X contiene la versi√≥n inicial de un mismo problema (aplicar un impuesto a varias cantidades monetarias) y Hole X + 1 muestra la soluci√≥n deseada tras la refactorizaci√≥n.&lt;/p>
&lt;h2 id="objetivo">Objetivo&lt;/h2>
&lt;p>Tu misi√≥n es transformar el c√≥digo de Hole X hasta que se comporte y se vea como el de Hole X + 1, procurando hacerlo de forma segura y con el menor n√∫mero posible de modificaciones manuales. El foco est√° en practicar refactorizaciones guiadas por tests, empleando transformaciones autom√°ticas y atajos del entorno de desarrollo para ahorrar esfuerzo y reducir errores.&lt;/p></description></item><item><title>Lift Pass Pricing Kata</title><link>https://www.exeal.com/katas/lift-pass-pricing-kata/</link><pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/lift-pass-pricing-kata/</guid><description>&lt;h2 id="tu-tarea">Tu tarea&lt;/h2>
&lt;p>Esta aplicaci√≥n resuelve el problema de calcular el precio de los &lt;em>forfaits&lt;/em>, es decir, los pases para acceder a esquiar. Existe una l√≥gica intrincada vinculada al tipo de &lt;em>forfait&lt;/em> que deseas, tu edad y la fecha espec√≠fica en la que te gustar√≠a esquiar.&lt;/p>
&lt;p>Se pide implementar una nueva funcionalidad: poder obtener el precio de varios &lt;em>forfaits&lt;/em>, no solo uno.&lt;/p>
&lt;p>Actualmente, el precio de un solo &lt;em>forfait&lt;/em> est√° implementado; desafortunadamente, el c√≥digo tal como est√° dise√±ado no es reutilizable. Podr√≠as implementar algunos tests de alto nivel para realizar una refactorizaci√≥n preparatoria de modo que la nueva funcionalidad requiera un esfuerzo m√≠nimo para implementarse.&lt;/p></description></item><item><title>Parrot Refactoring Kata</title><link>https://www.exeal.com/katas/parrot-refactoring-kata/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/parrot-refactoring-kata/</guid><description>&lt;h2 id="tu-tarea">Tu tarea&lt;/h2>
&lt;p>¬øPuedes detectar alg√∫n &amp;ldquo;code smell&amp;rdquo; en este c√≥digo? Te dar√© una pista, el problema m√°s evidente se engloba dentro de la categor√≠a de &lt;a href="https://refactoring.guru/es/refactoring/smells/oo-abusers">Object orientation abusers&lt;/a>.&lt;/p>
&lt;h2 id="c√≥mo-resolverla">C√≥mo resolverla&lt;/h2>
&lt;p>Descarga el c√≥digo inicial aqu√≠, y elige el lenguaje en el que desees resolver la kata: &lt;a href="https://github.com/emilybache/Parrot-Refactoring-Kata">https://github.com/emilybache/Parrot-Refactoring-Kata&lt;/a>&lt;/p>
&lt;p>Refactoriza el c√≥digo aplicando los movimientos de la receta &lt;a href="https://refactoring.guru/es/replace-conditional-with-polymorphism">&amp;ldquo;Reemplazar condicional con polimorfismo&amp;rdquo;&lt;/a>, dando peque√±os pasos, y ejecutando los tests con frecuencia. Intenta no modificar el c√≥digo de producci√≥n y el c√≥digo de tests a la vez y, sobre todo, &lt;strong>mantener los tests en verde en todo momento&lt;/strong>.&lt;/p></description></item><item><title>Trip Service Kata</title><link>https://www.exeal.com/katas/trip-service-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/trip-service-kata/</guid><description>&lt;h2 id="tu-tarea">Tu tarea&lt;/h2>
&lt;p>El c√≥digo de inicio de esta kata consiste en un servicio (&lt;code>TripService&lt;/code>) que no est√° testeado. El c√≥digo contiene dos dependencias que evitan que a√±adamos tests correctamente.&lt;/p>
&lt;p>Nuestras tareas con este c√≥digo son:&lt;/p>
&lt;ul>
&lt;li>Desacoplar las dependencias que impiden cubrir el c√≥digo con tests.&lt;/li>
&lt;li>A√±adir tests de caracterizaci√≥n para todos los casos necesarios.&lt;/li>
&lt;li>Refactorizar el c√≥digo resultante para mejorar la legibilidad.&lt;/li>
&lt;/ul>
&lt;p>Reglas:&lt;/p>
&lt;ul>
&lt;li>No podemos cambiar ning√∫n c√≥digo existente si no est√° cubierto por tests.&lt;/li>
&lt;li>No podemos permitirnos romper ning√∫n comportamiento existente.
&lt;ul>
&lt;li>La √∫nica excepci√≥n es si necesitamos modificar el c√≥digo para agregar pruebas unitarias, pero en este caso, solo se permiten refactorizaciones automatizadas (a trav√©s del IDE).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>C√≥digo de inicio de la kata: &lt;a href="https://github.com/exeal-es/trip-service-kata">https://github.com/exeal-es/trip-service-kata&lt;/a>&lt;/p></description></item><item><title>Prepara tu c√≥digo para lo que venga con Reflective Design</title><link>https://www.exeal.com/blog/2022/08/reflective-design/</link><pubDate>Thu, 10 Nov 2022 00:07:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/08/reflective-design/</guid><description>&lt;p>¬øPor qu√© los proyectos greenfield acaban convirti√©ndose poco a poco en c√≥digo legacy, dif√≠cil de extender y mantener?&lt;/p>
&lt;p>En un &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> coment√°bamos que existen fuerzas, como los requisitos cambiantes, los deadlines, o la naturaleza social del desarrollo de software, que hace que &lt;strong>el c√≥digo de nuestros proyectos poco a poco se vaya deteriorando si no hacemos nada al respecto&lt;/strong>. Por tanto, como desarrolladores debemos ejercer fuerzas opuestas para contrarrestar este efecto.&lt;/p></description></item><item><title>Transformation Priority Premise</title><link>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</link><pubDate>Sun, 07 Aug 2022 23:10:00 +0000</pubDate><guid>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</guid><description>&lt;p>&lt;a href="https://es.wikipedia.org/wiki/Robert_C._Martin">El tio bob&lt;/a> lleva muchos a√±os diciendo que mientras las pruebas son m√°s espec√≠ficas, el c√≥digo se hace m√°s gen√©rico. Y es que de tanto refactorizar, de tanto modificar el c√≥digo con esas peque√±as mejoras de estructura sin cambiar su comportamiento exterior, van ocurriendo transformaciones en el c√≥digo de producci√≥n que parecen seguir un cierto camino ordenado.&lt;/p>
&lt;p>Esto parece generar una lista de transformaciones ordenada que nos puede servir de gu√≠a para alcanzar una implementaci√≥n m√°s gen√©rica. Adem√°s nos ayuda a dar peque√±os pasos de beb√© al objetivo deseado, cosa dif√≠cil de asimilar en TDD al inicio.&lt;/p></description></item><item><title>Characterization Tests</title><link>https://www.exeal.com/blog/2021/10/characterization-test/</link><pubDate>Thu, 21 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/characterization-test/</guid><description>&lt;h2 id="characterization-tests">Characterization Tests&lt;/h2>
&lt;p>¬°Hola! ¬øc√≥mo estan? Espero que muy bien, Soy Dami√°n üëã, Technical Coach en &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy me gustar√≠a intentar explicarles para qu√© sirven los tests de caracterizaci√≥n.&lt;/p>
&lt;h2 id="qu√©-son-">¬øQu√© son? &amp;hellip;&lt;/h2>
&lt;p>Cuando trabajamos con c√≥digo legacy, los tests de caracterizaci√≥n pueden ser una excelente herramienta para afrontar futuros refactors, ya que son tests automatizados que permiten tener un respaldo al momento de querer refactorizar un determinado componente de nuestra aplicaci√≥n.
Hay que tener en cuenta algo muy &lt;strong>importante&lt;/strong>, los tests de caracterizaci√≥n ser√°n un gran apoyo a la hora de realizar cambios, pero estos tipos de tests verifican el &lt;strong>comportamiento actual&lt;/strong> no el &lt;strong>comportamiento deseado&lt;/strong>.&lt;/p></description></item><item><title>Strangler fig pattern</title><link>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</link><pubDate>Sun, 03 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</guid><description>&lt;h2 id="mi-primer-blog">Mi primer blog&lt;/h2>
&lt;p>¬°Hola! ¬øc√≥mo estan? Espero que muy bien, Soy Dami√°n üëã, Technical Coach de &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy vengo a comentarles nuestra experiencia aplicando &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler-fig">Strangler fig pattern&lt;/a>.&lt;/p>
&lt;h2 id="antes-de-comenzar-">Antes de comenzar &amp;hellip;&lt;/h2>
&lt;p>Me gustar√≠a explicarles brevemente en qu√© consiste esta t√©cnica de refactoring. Strangler fig pattern es un t√©cnica que nos permitir√° &lt;strong>migrar&lt;/strong> nuestro actual software a otro anteponiendo un proxy que nos ayudar√° a &lt;strong>migrar&lt;/strong> poco a poco nuestro c√≥digo obsoleto a nuestro nuevo software.&lt;/p></description></item><item><title>H√°bitos de productividad como programadores</title><link>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</link><pubDate>Sun, 18 Apr 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</guid><description>&lt;p>En el &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> de esta serie sobre c√≥mo evitar que el c√≥digo greenfield se convierta en legacy, habl√°bamos de que una de las √°reas en las que pod√≠amos trabajar era en mejorar nuestras competencias y habilidades como desarrolladores para ser m√°s productivo.&lt;/p>
&lt;p>En mi experiencia haciendo coaching a equipos, uno de los primeros grandes saltos cualitativos para la mayor√≠a de ellos es aprender a usar correctamente las herramientas de nuestro d√≠a a d√≠a. Y la herramienta con la que m√°s tiempo pasamos todos los desarrolladores es &lt;strong>nuestro IDE&lt;/strong>, o &lt;strong>entorno de desarrollo&lt;/strong>. Adoptar buenos h√°bitos para exprimir al m√°ximo sus capacidades nos va a dar un boost de productividad muy relevante.&lt;/p></description></item></channel></rss>