<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>starter on Exeal</title><link>https://www.exeal.com/tags/starter/</link><description>Recent content in starter on Exeal</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sat, 24 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/starter/index.xml" rel="self" type="application/rss+xml"/><item><title>Factorial Kata</title><link>https://www.exeal.com/katas/factorial-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/factorial-kata/</guid><description>Tu tarea El factorial de un número natural, también notado como n!, se define como:
0! = 1 n! = n x (n-1) x (n-2) x &amp;hellip; x 1 Escribe una función que tome un número entero y devuelva su factorial.</description></item><item><title>Fibonacci Kata</title><link>https://www.exeal.com/katas/fibonacci-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/fibonacci-kata/</guid><description>Tu tarea La secuencia de Fibonacci se define como:
fib(0) = 0 fib(1) = 1 fib(n) = fib(n-1) + fib(n-2) para n&amp;gt;=2 Escribe una función para generar el número Fibonacci para la posición n.
Ejemplo:
int Fibonacci(int n)
Los primeros números Fibonacci en la secuencia son: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.</description></item><item><title>Password Input Field Validation Kata</title><link>https://www.exeal.com/katas/password-input-field-validation-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/password-input-field-validation-kata/</guid><description>Crea una función que pueda ser utilizada como validador para el campo de contraseña de un formulario de registro de usuario. La función de validación toma una cadena como entrada y devuelve un resultado de validación. El resultado de validación debe contener un booleano que indique si la contraseña es válida o no, y también un campo con los posibles errores de validación.
Requisitos:
La contraseña debe tener al menos 8 caracteres de longitud.</description></item><item><title>Point of Sale Kata</title><link>https://www.exeal.com/katas/point-of-sale-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/point-of-sale-kata/</guid><description>Tu tarea Crea una aplicación sencilla para escanear códigos de barras y vender productos.
Requisitos:
El código de barras 12345 debe mostrar el precio $7.25. El código de barras 23456 debe mostrar el precio $12.50. El código de barras 99999 debe mostrar &amp;quot;Error: código de barras no encontrado&amp;quot;. Un código de barras vacío debe mostrar &amp;quot;Error: código de barras vacío&amp;quot;. Introduce un concepto de comando total donde sea posible escanear múltiples productos.</description></item><item><title>Roman Numerals Kata</title><link>https://www.exeal.com/katas/roman-numerals-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/roman-numerals-kata/</guid><description>Los romanos fueron un grupo ingenioso. Conquistaron la mayor parte de Europa y la gobernaron durante cientos de años. Inventaron el concreto, las carreteras rectas e incluso los bikinis. Sin embargo, una cosa que nunca descubrieron fue el número cero. Esto hizo que escribir y fechar extensas historias de sus hazañas fuera un poco más desafiante, pero el sistema de números que idearon aún se usa hoy en día. Por ejemplo, la BBC utiliza números romanos para fechar sus programas.</description></item><item><title>Search Functionality Kata</title><link>https://www.exeal.com/katas/search-functionality-kata/</link><pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/search-functionality-kata/</guid><description>Implementa una funcionalidad de búsqueda de ciudades. La función toma una cadena (texto de búsqueda) como entrada y devuelve las ciudades encontradas que corresponden al texto de búsqueda.
Prerrequisitos Crea una colección de cadenas que actuarán como una base de datos para los nombres de ciudades.
Nombres de ciudades: París, Budapest, Skopje, Róterdam, Valencia, Vancouver, Ámsterdam, Viena, Sídney, Ciudad de Nueva York, Londres, Bangkok, Hong Kong, Dubái, Roma, Estambul Requisitos Si el texto de búsqueda tiene menos de 2 caracteres, entonces debería devolver ningún resultado.</description></item><item><title>Fizz Buzz Kata</title><link>https://www.exeal.com/katas/fizz-buzz-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/fizz-buzz-kata/</guid><description>Tu tarea Escribe una función FizzBuzz(number): string que reciba un número natural, y devuelva un string conforme a las siguientes reglas:
Normalmente, devuelve la representación como string del número. Para los múltiplos de tres, devuelve Fizz en lugar del número. Para los múltiplos de cinco, imprime Buzz en lugar del número. Para los números que son múltiplos de tres y cinco, devuelve FizzBuzz en lugar del número. Cómo resolverla Este es un ejercicio para practicar los fundamentos de test-driven development (TDD).</description></item><item><title>Game Of Life Kata</title><link>https://www.exeal.com/katas/game-of-life-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/game-of-life-kata/</guid><description>Tu tarea Esta kata trata sobre calcular la siguiente generación del Juego de la Vida de Conway, dado cualquier posición inicial. Consulta http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life para conocer más sobre este famoso problema.
Comienzas con una cuadrícula bidimensional de celdas, donde cada celda está viva o muerta. En esta versión del problema, la cuadrícula es finita y no puede haber vida más allá de los bordes. Al calcular la próxima generación de la cuadrícula, sigue estas reglas:</description></item><item><title>Leap Year Kata</title><link>https://www.exeal.com/katas/leap-year-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/leap-year-kata/</guid><description>Tu tarea Escribir una función que determine si un año dado es bisiesto o no, de acuerdo con las siguientes reglas.
Todos los años divisibles por 400 SON años bisiestos (por lo tanto, por ejemplo, el año 2000 fue de hecho un año bisiesto). Todos los años divisibles por 100 pero no por 400 NO SON años bisiestos (por lo tanto, por ejemplo, 1700, 1800 y 1900 NO fueron años bisiestos, NI lo será el año 2100).</description></item><item><title>Ohce Kata</title><link>https://www.exeal.com/katas/ohce-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/ohce-kata/</guid><description>Tu tarea ohce es una aplicación de consola que reproduce al revés lo que ingreses a través de la consola.
Aunque parezca una aplicación tonta, ohce hace algunas cosas más:
Cuando inicias ohce, te saluda de manera diferente según la hora actual, pero solo en español: Entre las 20 y las 6 horas, ohce te saludará diciendo: ¡Buenas noches &amp;lt;tu nombre&amp;gt;! Entre las 6 y las 12 horas, ohce te saludará diciendo: ¡Buenos días &amp;lt;tu nombre&amp;gt;!</description></item><item><title>Snake And Ladders Kata</title><link>https://www.exeal.com/katas/snake-and-ladders-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/snake-and-ladders-kata/</guid><description>Snakes and Ladders (Serpientes y Escaleras) es un antiguo juego de mesa indio considerado hoy en día un clásico mundial. Se juega entre dos o más jugadores en un tablero de juego que tiene cuadrados numerados y enrejados. En el tablero se representan varias &amp;ldquo;escaleras&amp;rdquo; y &amp;ldquo;serpientes&amp;rdquo;, cada una conectando dos cuadrados específicos del tablero. (Fuente: Wikipedia)
Tu tarea Tu tarea es crear una clase simple llamada SnakesLadders. Los casos de prueba llamarán al método play(die1: number, die2: number): string independientemente del estado del juego o del turno del jugador.</description></item><item><title>String Calculator Kata</title><link>https://www.exeal.com/katas/string-calculator-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/string-calculator-kata/</guid><description>Este es un ejercicio incremental para simular una situación empresarial real: avanza paso a paso en orden, pero no leas el siguiente requisito antes de haber terminado el actual.
Paso 1 Crea una calculadora simple de cadenas con una firma de método:
int Add(string numbers) El método puede recibir hasta dos números, separados por comas, y devolverá su suma.
Por ejemplo:
Para las entradas &amp;quot;&amp;quot; o &amp;ldquo;1&amp;rdquo; o &amp;ldquo;1,2&amp;rdquo;. Para una cadena vacía, devolverá 0.</description></item><item><title>Tennis Score Kata</title><link>https://www.exeal.com/katas/tennis-score-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/tennis-score-kata/</guid><description>Tu tarea Esta Kata trata de implementar las reglas de puntuación de un juego de tenis. El sistema de puntuación es bastante simple:
Cada jugador puede tener cualquiera de estos puntos en un juego: &amp;ldquo;love&amp;rdquo; (0), &amp;ldquo;15&amp;rdquo;, &amp;ldquo;30&amp;rdquo;, &amp;ldquo;40&amp;rdquo;. Si tienes 40 y ganas el punto, ganas el juego, sin embargo, hay reglas especiales. Si ambos tienen 40, los jugadores están en &amp;ldquo;deuce&amp;rdquo; (iguales). Si el juego está en &amp;ldquo;deuce&amp;rdquo; (iguales), el ganador de un punto obtendrá ventaja.</description></item><item><title>Tic Tac Toe Kata</title><link>https://www.exeal.com/katas/tic-tac-toe-kata/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/katas/tic-tac-toe-kata/</guid><description>Tu tarea Implementar el clásico juego tres en raya, en el que dos jugadores X y O marcan alternadamente los espacios de un tablero de 3x3. El primer jugador que haga 3 en raya gana la partida.
Las reglas del juego son las siguientes:
El juego termina cuando todos los campos están ocupados. El juego termina cuando todos los campos en una columna son ocupados por un jugador. El juego termina cuando todos los campos en una fila son ocupados por un jugador.</description></item></channel></rss>