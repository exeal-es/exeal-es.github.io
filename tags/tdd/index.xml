<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tdd on Exeal</title><link>https://www.exeal.com/tags/tdd/</link><description>Recent content in tdd on Exeal</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><lastBuildDate>Wed, 25 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/tdd/index.xml" rel="self" type="application/rss+xml"/><item><title>Cómo escribir el primer test usando TDD</title><link>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</guid><description>El primer test es uno de los pasos más importantes cuando desarrollamos TDD. Es el que va a determinar si construimos nuestra solución sobre unos cimientos sólidos o nos vamos a complicar la vida innecesariamente.
Hay tres cosas principales que yo le pido a mi primer test:
La primera, que ponga sobre la mesa los elementos más importantes que van a entrar en juego, o las entradas y salidas del sistema (a.</description></item><item><title>Transformation Priority Premise</title><link>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</link><pubDate>Sun, 07 Aug 2022 23:10:00 +0000</pubDate><guid>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</guid><description>Transformation Priority Premise El tio bob lleva muchos años diciendo que mientras las pruebas son más específicas, el código se hace más genérico. Y es que de tanto refactorizar, de tanto modificar el código con esas pequeñas mejoras de estructura sin cambiar su comportamiento exterior, van ocurriendo transformaciones en el código de producción que parecen seguir un cierto camino ordenado.
Esto parece generar una lista de transformaciones ordenada que nos puede servir de guía para alcanzar una implementación más genérica.</description></item></channel></rss>