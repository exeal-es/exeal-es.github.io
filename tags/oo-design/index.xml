<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oo-Design on Exeal</title><link>https://www.exeal.com/tags/oo-design/</link><description>Recent content in Oo-Design on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sun, 11 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/oo-design/index.xml" rel="self" type="application/rss+xml"/><item><title>No aprendas principios SOLID</title><link>https://www.exeal.com/blog/2024/02/no-aprendas-principios-solid/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/no-aprendas-principios-solid/</guid><description>&lt;p>Los principios SOLID son considerados por mucha gente la quintaesencia del &lt;em>buen diseño de software&lt;/em>. Llega un momento en la carrera de todo desarrollador que, harto de &lt;a href="https://www.exeal.com/cursos/rescata-tu-proyecto/">sufrir por tener que mantener código espaguetti cada día&lt;/a>, descubre SOLID y, cegado por el despecho y la ira hacia el código legacy, intenta aplicar SOLID a rajatabla.&lt;/p>
&lt;p>Sin embargo, &lt;strong>los principios SOLID esconden una trampa muy peligrosa&lt;/strong>: una en la que no caemos hasta que hemos aplicado SOLID lo suficiente como para darnos cuenta de que, en el mejor de los casos, nos hace perder el tiempo con discusiones infructíferas y, en el peor, puede convertir una base de código en un lugar más infernal aún en el que trabajar.&lt;/p></description></item><item><title>Prepara tu código para lo que venga con Reflective Design</title><link>https://www.exeal.com/blog/2022/08/reflective-design/</link><pubDate>Thu, 10 Nov 2022 00:07:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/08/reflective-design/</guid><description>&lt;p>¿Por qué los proyectos greenfield acaban convirtiéndose poco a poco en código legacy, difícil de extender y mantener?&lt;/p>
&lt;p>En un &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> comentábamos que existen fuerzas, como los requisitos cambiantes, los deadlines, o la naturaleza social del desarrollo de software, que hace que &lt;strong>el código de nuestros proyectos poco a poco se vaya deteriorando si no hacemos nada al respecto&lt;/strong>. Por tanto, como desarrolladores debemos ejercer fuerzas opuestas para contrarrestar este efecto.&lt;/p></description></item></channel></rss>