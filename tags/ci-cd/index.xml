<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ci-Cd on Exeal</title><link>https://www.exeal.com/tags/ci-cd/</link><description>Recent content in Ci-Cd on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Fri, 02 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/ci-cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Los 5 requisitos esenciales para implementar Integración Continua</title><link>https://www.exeal.com/blog/2024/02/requisitos-esenciales-integracion-continua/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/requisitos-esenciales-integracion-continua/</guid><description>&lt;p>La Integración Continua es una práctica fundamental para garantizar la entrega de software en cualquier momento. Sin embargo, para aprovechar al máximo sus beneficios, es crucial cumplir con ciertos requisitos mínimos que proporcionarán una base sólida. A continuación, desglosamos los elementos esenciales que conforman estos requisitos.&lt;/p>
&lt;h2 id="1-integración-diaria-en-la-rama-principal">1. Integración diaria en la rama principal&lt;/h2>
&lt;p>La integración de código en la rama principal (&lt;em>main&lt;/em> o &lt;em>master&lt;/em>) debe ocurrir al menos una vez al día. Este proceso se conoce como Trunk-based development. A pesar del nombre, no implica que integremos directamente en main. Podemos utilizar feature branches, siempre que tengan una duración limitada, preferiblemente menos de un día. Este enfoque evita problemas de multitasking, carga cognitiva excesiva y conflictos al mergear código.&lt;/p></description></item><item><title>Entregar código a diario: Continuous Integration y Continuous Delivery</title><link>https://www.exeal.com/blog/2024/02/entregar-codigo-a-diario-continuous-integration-y-continuous-delivery/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/entregar-codigo-a-diario-continuous-integration-y-continuous-delivery/</guid><description>&lt;p>En el mundo del desarrollo de software, la capacidad de integrar y desplegar código de manera eficiente y segura es crucial. Esta práctica no solo mejora la calidad del producto final, sino que también optimiza el proceso de desarrollo. En este post, exploraremos cómo lograr integraciones y despliegues diarios seguros, profundizando en los conceptos de &lt;strong>Integración Continua (CI) y Entrega Continua (CD)&lt;/strong>, sus diferencias y objetivos.&lt;/p>
&lt;h2 id="integración-y-despliegue-diario-cómo-conseguirlo">Integración y despliegue diario: ¿Cómo conseguirlo?&lt;/h2>
&lt;p>Integrar y desplegar código a diario implica un enfoque que maximiza la seguridad y la eficiencia. Atrás quedaron los días de despliegues manuales inseguros y propensos a errores. La clave está en la &lt;strong>automatización y la estandarización de los procesos de testing y despliegue&lt;/strong>. Esto asegura que cada cambio en el código sea verificado automáticamente, reduciendo significativamente los riesgos asociados con el despliegue.&lt;/p></description></item><item><title>La base de la integración continua: los micro-commits</title><link>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</guid><description>&lt;p>Quizá te sorprenda (a mí me sorprendió cuando empecé a &lt;a href="https://www.exeal.com/">ayudar a otros equipos como coach&lt;/a>), pero la mayoría de desarrolladores commitean código al control de versiones apenas entre 2 o 3 veces por semana.&lt;/p>
&lt;p>Esto les limita la frecuencia con la que pueden entregar código funcionando a producción.&lt;/p>
&lt;p>Cuando nuestro objetivo es incrementar la frecuencia de entrega de valor, y por tanto practicar &lt;em>trunk-based development&lt;/em>, &lt;em>continuous integration&lt;/em> y &lt;em>continuous delivery&lt;/em>, buscamos justo lo contrario: &lt;strong>acelerar la frecuencia con la que commiteamos, tanto como sea posible&lt;/strong>.&lt;/p></description></item></channel></rss>