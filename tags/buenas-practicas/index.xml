<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Buenas-Practicas on Exeal</title><link>https://www.exeal.com/tags/buenas-practicas/</link><description>Recent content in Buenas-Practicas on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Fri, 15 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/tags/buenas-practicas/index.xml" rel="self" type="application/rss+xml"/><item><title>La base de la integración continua: los micro-commits</title><link>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</guid><description>&lt;p>Quizá te sorprenda (a mí me sorprendió cuando empecé a &lt;a href="https://www.exeal.com/">ayudar a otros equipos como coach&lt;/a>), pero la mayoría de desarrolladores commitean código al control de versiones apenas entre 2 o 3 veces por semana.&lt;/p>
&lt;p>Esto les limita la frecuencia con la que pueden entregar código funcionando a producción.&lt;/p>
&lt;p>Cuando nuestro objetivo es incrementar la frecuencia de entrega de valor, y por tanto practicar &lt;em>trunk-based development&lt;/em>, &lt;em>continuous integration&lt;/em> y &lt;em>continuous delivery&lt;/em>, buscamos justo lo contrario: &lt;strong>acelerar la frecuencia con la que commiteamos, tanto como sea posible&lt;/strong>.&lt;/p></description></item><item><title>La deuda técnica buena</title><link>https://www.exeal.com/blog/2023/11/la-deuda-tecnica-buena/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/11/la-deuda-tecnica-buena/</guid><description>&lt;p>No toda la deuda técnica es mala.&lt;/p>
&lt;p>Existe la concepción extendida (y errónea, por cierto) de que la deuda técnica es el resultado de no tener calidad, o de hacer ñapas de diseño.&lt;/p>
&lt;p>Pero no tiene nada que ver con esto.&lt;/p>
&lt;p>La &lt;strong>deuda técnica es una decisión consciente&lt;/strong>, y una muy importante &lt;strong>a nivel estratégico&lt;/strong> en un proyecto.&lt;/p>
&lt;p>En el mundo de la inversión, en el que está inspirado el concepto de deuda técnica, se habla mucho de la deuda buena y la deuda mala.&lt;/p></description></item><item><title>Práctica deliberada: una forma alternativa de aprender TDD</title><link>https://www.exeal.com/blog/2023/10/practica-deliberada-y-tdd/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/practica-deliberada-y-tdd/</guid><description>&lt;p>¿Alguna vez &lt;strong>te has estancado&lt;/strong> practicando TDD, refactoring, diseño de software o cualquier otra habilidad relacionada con la programación?&lt;/p>
&lt;p>¿Sientes que te has quedado sin katas de resolver, y que las que hay son demasiado sencillas?&lt;/p>
&lt;p>Quizá es que &lt;strong>estés practicando con el enfoque erróneo&lt;/strong>.&lt;/p>
&lt;p>Para extraer el máximo partido de practicar con katas, tenemos que emplear una técnica de práctica muy concreta: la &lt;a href="https://jamesclear.com/deliberate-practice-theory">práctica deliberada&lt;/a>.&lt;/p>
&lt;h2 id="qué-es-la-práctica-deliberada">¿Qué es la práctica deliberada?&lt;/h2>
&lt;p>La práctica deliberada &lt;strong>es un método para practicar cualquier habilidad&lt;/strong>, especialmente aquellas que requieran repetición para dominar una técnica. Consiste en:&lt;/p></description></item><item><title>Cómo escribir el primer test usando TDD</title><link>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</guid><description>&lt;p>El primer test es uno de los pasos más importantes cuando desarrollamos TDD. Es el que va a determinar si construimos nuestra solución sobre unos cimientos sólidos o nos vamos a complicar la vida innecesariamente.&lt;/p>
&lt;p>Hay tres cosas principales que yo le pido a mi primer test:&lt;/p>
&lt;ol>
&lt;li>La primera, que ponga sobre la mesa los elementos más importantes que van a entrar en juego, o las entradas y salidas del sistema (a.k.a. el “given” más sencillo)&lt;/li>
&lt;li>La segunda, que me defina cómo voy a interactuar con el sistema, la fachada del mismo, i.e. cuál es la interfaz pública de mi módulo o clase (a.k.a. el “when” más sencillo”).&lt;/li>
&lt;li>Tercera, que capture el comportamiento del caso más simple que involucre a todos los elementos, o las salidas y entradas más sencillas (a.k.a. el “then” más sencillo).&lt;/li>
&lt;/ol>
&lt;p>Lo que busco con esto es definir las interfaces de todas las piezas que van a entrar en juego, y hacerlas funcionar lo antes posible con un caso muy sencillo, para que luego sea más fácil hacer crecer la solución de forma incremental añadiendo más tests.&lt;/p></description></item><item><title>¿Quién debería escribir las historias de usuario?</title><link>https://www.exeal.com/blog/2023/10/quien-deberia-escribir-las-historias-de-usuario/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/quien-deberia-escribir-las-historias-de-usuario/</guid><description>&lt;p>¿Quién escribe las historias de usuario? ¿El Product Owner? ¿El Product Manager? ¿El propio equipo?&lt;/p>
&lt;p>Es una pregunta que sale de forma recurrente en los equipos. En la mayoría, es algo que hace el Product Owner. Es la única perspectiva que los desarrolladores tienen sobre &amp;ldquo;lo que pide&amp;rdquo; el cliente. Un documento de requisitos escrito por un proxy de un proxy del cliente, con el que jugamos al teléfono roto.&lt;/p></description></item><item><title>Cómo dividir los requisitos para entregar valor de forma continua: Vertical Slicing</title><link>https://www.exeal.com/blog/2023/10/como-dividir-los-requisitos-para-entregar-valor-de-forma-continua-vertical-slicing/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/como-dividir-los-requisitos-para-entregar-valor-de-forma-continua-vertical-slicing/</guid><description>&lt;p>Cuando trabajamos en un proyecto software de cierto tamaño, tenemos que dividir (hacer slicing, o &amp;ldquo;loncheado&amp;rdquo;) los requisitos más grandes en tareas más pequeñas y abordables.&lt;/p>
&lt;p>Existen dos formas de hacer esta división: slicing horizontal y vertical.&lt;/p>
&lt;p>Cuando hacemos &lt;em>horizontal slicing&lt;/em>, dividimos por un criterio técnico (normalmente capas). Hacemos una tarea para el front, otra para el back, otra para la base de datos, etc.&lt;/p>
&lt;p>Este enfoque nos plantea 2 problemas&lt;/p></description></item><item><title>Slack: cómo ganar predictibilidad, agilidad y construir un ritmo sostenible</title><link>https://www.exeal.com/blog/2023/07/slack-como-ganar-predictibilidad-agilidad-y-ritmo-sostenible/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/07/slack-como-ganar-predictibilidad-agilidad-y-ritmo-sostenible/</guid><description>&lt;h2 id="una-historia-de--mensajería">Una historia de … ¿mensajería?&lt;/h2>
&lt;p>Permíteme que te presente al equipo de Messaging de la empresa Drocsid Inc. El equipo de Messaging viene arrastrando un problema durante los últimos meses: en las últimas iteraciones de producto vienen sistemáticamente fallando al entregar todas las historias con las que se comprometieron al principio de la iteración. En cada &lt;em>sprint review&lt;/em> se repite la misma situación: el equipo excusándose en que los inconvenientes del &lt;em>business as usual&lt;/em> (esas tareas operativas que no podemos evitar, como resolver incidencias, dar soporte, despliegues, etc.) les han impedido acabar con todos los compromisos de la iteración; de que no tienen tiempo para dedicar a la mejora técnica y de procesos que necesitan para poder ser más predecibles; stakeholders decepcionados porque contaban con que el equipo entregaría esas funcionalidades, y la percepción por parte de management de que &lt;strong>el equipo está no está rindiendo lo suficiente&lt;/strong>.&lt;/p></description></item></channel></rss>