<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Exeal</title><link>https://www.exeal.com/blog/</link><description>Recent content in Blog on Exeal</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sun, 17 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.exeal.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Technical coaching, buenas prácticas y dogmas en la programacion</title><link>https://www.exeal.com/blog/2024/03/technical-coaching-buenas-practicas-y-dogmas-en-la-programacion/</link><pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/03/technical-coaching-buenas-practicas-y-dogmas-en-la-programacion/</guid><description>&lt;p>Recientemente fui invitado al podcast &lt;a href="https://www.youtube.com/@ctrl_alt_meet">Ctrl + Alt + Meet&lt;/a>, en el que tuve la oportunidad de hablar sobre buenas prácticas de programación, el &amp;ldquo;dogma&amp;rdquo; que hay entre programadores con temas como los principios SOLID y como ser mas productivos.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/UA0Usm4C-qM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div></description></item><item><title>Desarrollo Tecnológico en Tiempos de Cambio: Claves para Brillar en 2024</title><link>https://www.exeal.com/blog/2024/03/desarrollo-tecnologico-en-tiempos-de-cambio-claves-para-brillar-en-2024/</link><pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/03/desarrollo-tecnologico-en-tiempos-de-cambio-claves-para-brillar-en-2024/</guid><description>&lt;p>Recientemente fui invitado al podcast &lt;a href="https://www.youtube.com/@TechFromTheTrenches">Tech from the trenches&lt;/a>, en el que tuve la oportunidad de hablar sobre cómo pueden los desarrolladores adaptarse eficazmente a los cambios actuales, respondiendo a preguntas como:&lt;/p>
&lt;ul>
&lt;li>¿Cómo pueden los desarrolladores adaptarse eficazmente a los cambios actuales?&lt;/li>
&lt;li>¿Cómo nos podemos convertir en “profesionales de alto valor”?&lt;/li>
&lt;li>¿Cuáles son algunas acciones específicas que los desarrolladores podemos tomar para empoderarnos y liderar nuestra propia carrera profesional?&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eXsC3T2WKEQ?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div></description></item><item><title>¿De verdad pair programming nos hace más productivos?</title><link>https://www.exeal.com/blog/2024/02/de-verdad-pair-programming-nos-hace-mas-productivos/</link><pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/de-verdad-pair-programming-nos-hace-mas-productivos/</guid><description>&lt;p>Si nunca has trabajado en pair programming, te pongo al día rápidamente: se trata de una práctica en la que &lt;strong>dos desarrolladores trabajan juntos en una única tarea, usando un único ordenador&lt;/strong>.&lt;/p>
&lt;p>Lo primero que se le viene a la mente a la gente que nunca ha trabajado con el pair programming es siempre lo mismo: &lt;em>¿Cómo va a ser más productivo dos personas trabajando en un sólo ordenador en una única tarea, cuando podrían estar cada uno con una tarea diferente y sacaríamos el doble de trabajo en el mismo tiempo?&lt;/em>&lt;/p></description></item><item><title>No aprendas principios SOLID</title><link>https://www.exeal.com/blog/2024/02/no-aprendas-principios-solid/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/no-aprendas-principios-solid/</guid><description>&lt;p>Los principios SOLID son considerados por mucha gente la quintaesencia del &lt;em>buen diseño de software&lt;/em>. Llega un momento en la carrera de todo desarrollador que, harto de &lt;a href="https://www.exeal.com/cursos/legacy-code/">sufrir por tener que mantener código espaguetti cada día&lt;/a>, descubre SOLID y, cegado por el despecho y la ira hacia el código legacy, intenta aplicar SOLID a rajatabla.&lt;/p>
&lt;p>Sin embargo, &lt;strong>los principios SOLID esconden una trampa muy peligrosa&lt;/strong>: una en la que no caemos hasta que hemos aplicado SOLID lo suficiente como para darnos cuenta de que, en el mejor de los casos, nos hace perder el tiempo con discusiones infructíferas y, en el peor, puede convertir una base de código en un lugar más infernal aún en el que trabajar.&lt;/p></description></item><item><title>Los 5 requisitos esenciales para implementar Integración Continua</title><link>https://www.exeal.com/blog/2024/02/requisitos-esenciales-integracion-continua/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/requisitos-esenciales-integracion-continua/</guid><description>&lt;p>La Integración Continua es una práctica fundamental para garantizar la entrega de software en cualquier momento. Sin embargo, para aprovechar al máximo sus beneficios, es crucial cumplir con ciertos requisitos mínimos que proporcionarán una base sólida. A continuación, desglosamos los elementos esenciales que conforman estos requisitos.&lt;/p>
&lt;h2 id="1-integración-diaria-en-la-rama-principal">1. Integración diaria en la rama principal&lt;/h2>
&lt;p>La integración de código en la rama principal (&lt;em>main&lt;/em> o &lt;em>master&lt;/em>) debe ocurrir al menos una vez al día. Este proceso se conoce como Trunk-based development. A pesar del nombre, no implica que integremos directamente en main. Podemos utilizar feature branches, siempre que tengan una duración limitada, preferiblemente menos de un día. Este enfoque evita problemas de multitasking, carga cognitiva excesiva y conflictos al mergear código.&lt;/p></description></item><item><title>Entregar código a diario: Continuous Integration y Continuous Delivery</title><link>https://www.exeal.com/blog/2024/02/entregar-codigo-a-diario-continuous-integration-y-continuous-delivery/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/02/entregar-codigo-a-diario-continuous-integration-y-continuous-delivery/</guid><description>&lt;p>En el mundo del desarrollo de software, la capacidad de integrar y desplegar código de manera eficiente y segura es crucial. Esta práctica no solo mejora la calidad del producto final, sino que también optimiza el proceso de desarrollo. En este post, exploraremos cómo lograr integraciones y despliegues diarios seguros, profundizando en los conceptos de &lt;strong>Integración Continua (CI) y Entrega Continua (CD)&lt;/strong>, sus diferencias y objetivos.&lt;/p>
&lt;h2 id="integración-y-despliegue-diario-cómo-conseguirlo">Integración y despliegue diario: ¿Cómo conseguirlo?&lt;/h2>
&lt;p>Integrar y desplegar código a diario implica un enfoque que maximiza la seguridad y la eficiencia. Atrás quedaron los días de despliegues manuales inseguros y propensos a errores. La clave está en la &lt;strong>automatización y la estandarización de los procesos de testing y despliegue&lt;/strong>. Esto asegura que cada cambio en el código sea verificado automáticamente, reduciendo significativamente los riesgos asociados con el despliegue.&lt;/p></description></item><item><title>Cuándo es recomendable y cuándo no usar TDD</title><link>https://www.exeal.com/blog/2024/01/cuando-es-recomendable-y-cuando-no-usar-tdd/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2024/01/cuando-es-recomendable-y-cuando-no-usar-tdd/</guid><description>&lt;p>En el mundo del desarrollo de software, la adopción de prácticas como &lt;em>Test-driven development&lt;/em> (Desarrollo dirigido por pruebas, o TDD) ha generado debates fervientes sobre su aplicabilidad universal. La premisa de alcanzar un 100% de cobertura de pruebas puede resultar atractiva, pero es crucial comprender que TDD es una herramienta, no una panacea. Aprender a discernir cuándo utilizarla de manera efectiva es fundamental para el éxito de un proyecto.&lt;/p>
&lt;h2 id="enfoque-en-el-dominio">Enfoque en el dominio&lt;/h2>
&lt;p>Uno de los principios clave al decidir cuándo emplear TDD es evaluar la proximidad al dominio de la aplicación. Las reglas de negocio, el núcleo vital que define el comportamiento del sistema, son candidatas ideales para la implementación con TDD. Aquí, la alta cobertura de pruebas y el diseño emergente aportan un valor inestimable, asegurando la robustez del código en el corazón mismo del software.&lt;/p></description></item><item><title>La base de la integración continua: los micro-commits</title><link>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/12/la-base-de-la-integracion-continua-los-micro-commits/</guid><description>&lt;p>Quizá te sorprenda (a mí me sorprendió cuando empecé a &lt;a href="https://www.exeal.com/">ayudar a otros equipos como coach&lt;/a>), pero la mayoría de desarrolladores commitean código al control de versiones apenas entre 2 o 3 veces por semana.&lt;/p>
&lt;p>Esto les limita la frecuencia con la que pueden entregar código funcionando a producción.&lt;/p>
&lt;p>Cuando nuestro objetivo es incrementar la frecuencia de entrega de valor, y por tanto practicar &lt;em>trunk-based development&lt;/em>, &lt;em>continuous integration&lt;/em> y &lt;em>continuous delivery&lt;/em>, buscamos justo lo contrario: &lt;strong>acelerar la frecuencia con la que commiteamos, tanto como sea posible&lt;/strong>.&lt;/p></description></item><item><title>La deuda técnica buena</title><link>https://www.exeal.com/blog/2023/11/la-deuda-tecnica-buena/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/11/la-deuda-tecnica-buena/</guid><description>&lt;p>No toda la deuda técnica es mala.&lt;/p>
&lt;p>Existe la concepción extendida (y errónea, por cierto) de que la deuda técnica es el resultado de no tener calidad, o de hacer ñapas de diseño.&lt;/p>
&lt;p>Pero no tiene nada que ver con esto.&lt;/p>
&lt;p>La &lt;strong>deuda técnica es una decisión consciente&lt;/strong>, y una muy importante &lt;strong>a nivel estratégico&lt;/strong> en un proyecto.&lt;/p>
&lt;p>En el mundo de la inversión, en el que está inspirado el concepto de deuda técnica, se habla mucho de la deuda buena y la deuda mala.&lt;/p></description></item><item><title>Práctica deliberada: una forma alternativa de aprender TDD</title><link>https://www.exeal.com/blog/2023/10/practica-deliberada-y-tdd/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/practica-deliberada-y-tdd/</guid><description>&lt;p>¿Alguna vez &lt;strong>te has estancado&lt;/strong> practicando TDD, refactoring, diseño de software o cualquier otra habilidad relacionada con la programación?&lt;/p>
&lt;p>¿Sientes que te has quedado sin katas de resolver, y que las que hay son demasiado sencillas?&lt;/p>
&lt;p>Quizá es que &lt;strong>estés practicando con el enfoque erróneo&lt;/strong>.&lt;/p>
&lt;p>Para extraer el máximo partido de practicar con katas, tenemos que emplear una técnica de práctica muy concreta: la &lt;a href="https://jamesclear.com/deliberate-practice-theory">práctica deliberada&lt;/a>.&lt;/p>
&lt;h2 id="qué-es-la-práctica-deliberada">¿Qué es la práctica deliberada?&lt;/h2>
&lt;p>La práctica deliberada &lt;strong>es un método para practicar cualquier habilidad&lt;/strong>, especialmente aquellas que requieran repetición para dominar una técnica. Consiste en:&lt;/p></description></item><item><title>Cómo escribir el primer test usando TDD</title><link>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</link><pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/como-escribir-el-primer-test-usando-tdd/</guid><description>&lt;p>El primer test es uno de los pasos más importantes cuando desarrollamos TDD. Es el que va a determinar si construimos nuestra solución sobre unos cimientos sólidos o nos vamos a complicar la vida innecesariamente.&lt;/p>
&lt;p>Hay tres cosas principales que yo le pido a mi primer test:&lt;/p>
&lt;ol>
&lt;li>La primera, que ponga sobre la mesa los elementos más importantes que van a entrar en juego, o las entradas y salidas del sistema (a.k.a. el “given” más sencillo)&lt;/li>
&lt;li>La segunda, que me defina cómo voy a interactuar con el sistema, la fachada del mismo, i.e. cuál es la interfaz pública de mi módulo o clase (a.k.a. el “when” más sencillo”).&lt;/li>
&lt;li>Tercera, que capture el comportamiento del caso más simple que involucre a todos los elementos, o las salidas y entradas más sencillas (a.k.a. el “then” más sencillo).&lt;/li>
&lt;/ol>
&lt;p>Lo que busco con esto es definir las interfaces de todas las piezas que van a entrar en juego, y hacerlas funcionar lo antes posible con un caso muy sencillo, para que luego sea más fácil hacer crecer la solución de forma incremental añadiendo más tests.&lt;/p></description></item><item><title>¿Quién debería escribir las historias de usuario?</title><link>https://www.exeal.com/blog/2023/10/quien-deberia-escribir-las-historias-de-usuario/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/quien-deberia-escribir-las-historias-de-usuario/</guid><description>&lt;p>¿Quién escribe las historias de usuario? ¿El Product Owner? ¿El Product Manager? ¿El propio equipo?&lt;/p>
&lt;p>Es una pregunta que sale de forma recurrente en los equipos. En la mayoría, es algo que hace el Product Owner. Es la única perspectiva que los desarrolladores tienen sobre &amp;ldquo;lo que pide&amp;rdquo; el cliente. Un documento de requisitos escrito por un proxy de un proxy del cliente, con el que jugamos al teléfono roto.&lt;/p></description></item><item><title>Cómo dividir los requisitos para entregar valor de forma continua: Vertical Slicing</title><link>https://www.exeal.com/blog/2023/10/como-dividir-los-requisitos-para-entregar-valor-de-forma-continua-vertical-slicing/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/10/como-dividir-los-requisitos-para-entregar-valor-de-forma-continua-vertical-slicing/</guid><description>&lt;p>Cuando trabajamos en un proyecto software de cierto tamaño, tenemos que dividir (hacer slicing, o &amp;ldquo;loncheado&amp;rdquo;) los requisitos más grandes en tareas más pequeñas y abordables.&lt;/p>
&lt;p>Existen dos formas de hacer esta división: slicing horizontal y vertical.&lt;/p>
&lt;p>Cuando hacemos &lt;em>horizontal slicing&lt;/em>, dividimos por un criterio técnico (normalmente capas). Hacemos una tarea para el front, otra para el back, otra para la base de datos, etc.&lt;/p>
&lt;p>Este enfoque nos plantea 2 problemas&lt;/p></description></item><item><title>Slack: cómo ganar predictibilidad, agilidad y construir un ritmo sostenible</title><link>https://www.exeal.com/blog/2023/07/slack-como-ganar-predictibilidad-agilidad-y-ritmo-sostenible/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://www.exeal.com/blog/2023/07/slack-como-ganar-predictibilidad-agilidad-y-ritmo-sostenible/</guid><description>&lt;h2 id="una-historia-de--mensajería">Una historia de … ¿mensajería?&lt;/h2>
&lt;p>Permíteme que te presente al equipo de Messaging de la empresa Drocsid Inc. El equipo de Messaging viene arrastrando un problema durante los últimos meses: en las últimas iteraciones de producto vienen sistemáticamente fallando al entregar todas las historias con las que se comprometieron al principio de la iteración. En cada &lt;em>sprint review&lt;/em> se repite la misma situación: el equipo excusándose en que los inconvenientes del &lt;em>business as usual&lt;/em> (esas tareas operativas que no podemos evitar, como resolver incidencias, dar soporte, despliegues, etc.) les han impedido acabar con todos los compromisos de la iteración; de que no tienen tiempo para dedicar a la mejora técnica y de procesos que necesitan para poder ser más predecibles; stakeholders decepcionados porque contaban con que el equipo entregaría esas funcionalidades, y la percepción por parte de management de que &lt;strong>el equipo está no está rindiendo lo suficiente&lt;/strong>.&lt;/p></description></item><item><title>Prepara tu código para lo que venga con Reflective Design</title><link>https://www.exeal.com/blog/2022/08/reflective-design/</link><pubDate>Thu, 10 Nov 2022 00:07:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/08/reflective-design/</guid><description>&lt;p>¿Por qué los proyectos greenfield acaban convirtiéndose poco a poco en código legacy, difícil de extender y mantener?&lt;/p>
&lt;p>En un &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> comentábamos que existen fuerzas, como los requisitos cambiantes, los deadlines, o la naturaleza social del desarrollo de software, que hace que &lt;strong>el código de nuestros proyectos poco a poco se vaya deteriorando si no hacemos nada al respecto&lt;/strong>. Por tanto, como desarrolladores debemos ejercer fuerzas opuestas para contrarrestar este efecto.&lt;/p></description></item><item><title>Los principios FIRST</title><link>https://www.exeal.com/blog/2022/08/first/</link><pubDate>Wed, 28 Sep 2022 23:10:00 +0000</pubDate><guid>https://www.exeal.com/blog/2022/08/first/</guid><description>&lt;h2 id="los-principios-first">Los principios FIRST&lt;/h2>
&lt;p>FIRST es el acrónimo de las cinco características que deben tener nuestros tests unitarios para ser considerados tests de calidad:&lt;/p>
&lt;ul>
&lt;li>Fast (rápido)&lt;/li>
&lt;li>Independent (independiente)&lt;/li>
&lt;li>Repeatable (repetible)&lt;/li>
&lt;li>Self-validating (auto evaluable)&lt;/li>
&lt;li>Timely (oportuno)&lt;/li>
&lt;/ul>
&lt;h2 id="fast-rápido">Fast (rápido)&lt;/h2>
&lt;p>Una de las ventajas que nos ofrecen los test unitarios es la posibilidad de ejecutar un gran número de tests en cuestión de segundos. Todas las pruebas de nuestro proyecto, o al menos las relacionadas con el código, que estemos desarrollando &lt;strong>deberían poder ejecutarse en un abrir y cerrar de ojos&lt;/strong>.&lt;/p></description></item><item><title>Transformation Priority Premise</title><link>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</link><pubDate>Sun, 07 Aug 2022 23:10:00 +0000</pubDate><guid>https://www.exeal.com/blog/2022/08/transformation-priority-premise/</guid><description>&lt;p>&lt;a href="https://es.wikipedia.org/wiki/Robert_C._Martin">El tio bob&lt;/a> lleva muchos años diciendo que mientras las pruebas son más específicas, el código se hace más genérico. Y es que de tanto refactorizar, de tanto modificar el código con esas pequeñas mejoras de estructura sin cambiar su comportamiento exterior, van ocurriendo transformaciones en el código de producción que parecen seguir un cierto camino ordenado.&lt;/p>
&lt;p>Esto parece generar una lista de transformaciones ordenada que nos puede servir de guía para alcanzar una implementación más genérica. Además nos ayuda a dar pequeños pasos de bebé al objetivo deseado, cosa difícil de asimilar en TDD al inicio.&lt;/p></description></item><item><title>El rol de technical coach: ¿podría ser para mí?</title><link>https://www.exeal.com/blog/2022/04/technical-coach/</link><pubDate>Tue, 19 Apr 2022 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2022/04/technical-coach/</guid><description>&lt;h2 id="cómo-y-por-qué-acabé-siendo-technical-coach">Cómo y por qué acabé siendo technical coach&lt;/h2>
&lt;p>Hace tres meses comencé una nueva aventura profesional en &lt;a href="https://www.exeal.com/">Exeal&lt;/a> (una empresa que se dedica a mejorar las habilidades de los equipos que desarrollan software). Buscaban a alguien que quisiera ejercer el rol de &lt;a href="https://twitter.com/ppardalj/status/1444918028156772353">technical coach&lt;/a>. Aunque en ese momento yo no estaba buscando un cambio y no tenía ninguna experencia formal en el puesto, no pude resistirme por dos motivos principalmente:&lt;/p>
&lt;ul>
&lt;li>🙀 por un lado es un puesto de trabajo nada común en España, y me parecía que no iba a encontrar muchas oportunidades como esa.&lt;/li>
&lt;li>😻 además, desde siempre la parte de la informática que más me ha interesado ha sido la que tiene que ver con buenas prácticas (diseño, principios de programación,&amp;hellip;). Durante los últimos 4 años había estado trabajando en un empresa (&lt;a href="https://www.alea-soluciones.com/">Alea Soluciones&lt;/a>) con una implementación de eXtreme programming muy fuerte; y tenía claro me encantaría poder dedicar todo mi tiempo a profundizar aún más en las prácticas que esta filosofía propone.&lt;/li>
&lt;/ul>
&lt;h2 id="pero-qué-hace-un-technical-coach-exactamente">¿Pero qué hace un technical coach exactamente?&lt;/h2>
&lt;p>El technical coach tiene como objetivo asegurar la mejora de las capacidades técnicas de los equipos de desarrollo. Cualquiera que ayude al equipo a mejorar técnicamente. Principalmente se engloban en:&lt;/p></description></item><item><title>Mob programming</title><link>https://www.exeal.com/blog/2021/10/mob-programming/</link><pubDate>Tue, 26 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/mob-programming/</guid><description>&lt;h2 id="mob-programming">Mob programming&lt;/h2>
&lt;p>¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach en &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y en esta oportunidad me gustaría explicarles brevemente como funciona esta dinámica que llevamos a diario en &lt;a href="https://www.exeal.com/">Exeal&lt;/a>&lt;/p>
&lt;p>Desde mi punto de vista, &lt;strong>Mob Programming&lt;/strong> es una de las mejores prácticas que debe tener cualquier desarrollador de software dentro de su toolkit; no solo por los resultados evidentes de esta dinámica, como el conocimiento colectivo y la calidad de código que aportamos al momento de realizarlo, sino porque además nos enseña implícitamente a escuchar, hablar y respetar a nuestros compañeros de equipo.&lt;/p></description></item><item><title>Characterization Tests</title><link>https://www.exeal.com/blog/2021/10/characterization-test/</link><pubDate>Thu, 21 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/characterization-test/</guid><description>&lt;h2 id="characterization-tests">Characterization Tests&lt;/h2>
&lt;p>¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach en &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy me gustaría intentar explicarles para qué sirven los tests de caracterización.&lt;/p>
&lt;h2 id="qué-son-">¿Qué son? &amp;hellip;&lt;/h2>
&lt;p>Cuando trabajamos con código legacy, los tests de caracterización pueden ser una excelente herramienta para afrontar futuros refactors, ya que son tests automatizados que permiten tener un respaldo al momento de querer refactorizar un determinado componente de nuestra aplicación.
Hay que tener en cuenta algo muy &lt;strong>importante&lt;/strong>, los tests de caracterización serán un gran apoyo a la hora de realizar cambios, pero estos tipos de tests verifican el &lt;strong>comportamiento actual&lt;/strong> no el &lt;strong>comportamiento deseado&lt;/strong>.&lt;/p></description></item><item><title>Strangler fig pattern</title><link>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</link><pubDate>Sun, 03 Oct 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/10/stringler-fig-pattern/</guid><description>&lt;h2 id="mi-primer-blog">Mi primer blog&lt;/h2>
&lt;p>¡Hola! ¿cómo estan? Espero que muy bien, Soy Damián 👋, Technical Coach de &lt;a href="https://www.exeal.com/">Exeal&lt;/a>, y hoy vengo a comentarles nuestra experiencia aplicando &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler-fig">Strangler fig pattern&lt;/a>.&lt;/p>
&lt;h2 id="antes-de-comenzar-">Antes de comenzar &amp;hellip;&lt;/h2>
&lt;p>Me gustaría explicarles brevemente en qué consiste esta técnica de refactoring. Strangler fig pattern es un técnica que nos permitirá &lt;strong>migrar&lt;/strong> nuestro actual software a otro anteponiendo un proxy que nos ayudará a &lt;strong>migrar&lt;/strong> poco a poco nuestro código obsoleto a nuestro nuevo software.&lt;/p></description></item><item><title>Hábitos de productividad como programadores</title><link>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</link><pubDate>Sun, 18 Apr 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/04/habitos-de-productividad-como-programadores/</guid><description>&lt;p>En el &lt;a href="https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/">anterior post&lt;/a> de esta serie sobre cómo evitar que el código greenfield se convierta en legacy, hablábamos de que una de las áreas en las que podíamos trabajar era en mejorar nuestras competencias y habilidades como desarrolladores para ser más productivo.&lt;/p>
&lt;p>En mi experiencia haciendo coaching a equipos, uno de los primeros grandes saltos cualitativos para la mayoría de ellos es aprender a usar correctamente las herramientas de nuestro día a día. Y la herramienta con la que más tiempo pasamos todos los desarrolladores es &lt;strong>nuestro IDE&lt;/strong>, o &lt;strong>entorno de desarrollo&lt;/strong>. Adoptar buenos hábitos para exprimir al máximo sus capacidades nos va a dar un boost de productividad muy relevante.&lt;/p></description></item><item><title>Logs 101</title><link>https://www.exeal.com/blog/2021/04/logs-101/</link><pubDate>Wed, 07 Apr 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/04/logs-101/</guid><description>&lt;p>Recientemente en el equipo con el que trabajo, hemos tenido varias incidencias que han sido bastante difíciles de depurar. Los principales motivos son los siguientes:&lt;/p>
&lt;ul>
&lt;li>No hay logs&lt;/li>
&lt;li>Los logs que hay no son útiles&lt;/li>
&lt;/ul>
&lt;p>A raíz de esto preparé una learning hour sobre el tema, cuyo contenido ha acabado convirtiéndose en este post. Vamos a revisitar conceptos basicos de logging, explicar los factores necesarios para que los logs sean útiles, y aclarar algunos conceptos erróneos.&lt;/p></description></item><item><title>¿Por qué el código degenera?</title><link>https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/</link><pubDate>Fri, 26 Mar 2021 00:10:00 +0100</pubDate><guid>https://www.exeal.com/blog/2021/03/por-que-el-codigo-degenera/</guid><description>&lt;p>En mi &lt;a href="https://www.exeal.com/cursos/legacy-code/">training sobre código legacy&lt;/a>, suelo empezar preguntando a la gente que “qué es lo que caracteriza un código legacy”, y hay una constante que siempre sale en todos los equipos: &lt;strong>el código legacy da miedo, porque tocarlo supone un riesgo&lt;/strong>. Riesgo de romper algo que antes funcionaba, que está dando dinero, que está pagando las facturas… y deje de funcionar.&lt;/p>
&lt;p>Existe una concepción negativa sobre el código legacy: como desarrolladores, tendemos a evitar este tipo de proyectos. Si nos dan a elegir, preferimos trabajar en el equipo que está desarrollando el nuevo producto de la empresa, con tecnologías cloud, serverless, contenedores, microservicios, etc., antes que mantener el monolito legacy de 1 millón de líneas de código (cuando, irónicamente, es éste el que paga las facturas).&lt;/p></description></item><item><title>#4: Ritmo sostenible y código legacy</title><link>https://www.exeal.com/blog/2021/02/podcast-episodio-4-ritmo-sostenible-y-codigo-legacy/</link><pubDate>Sun, 28 Feb 2021 10:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2021/02/podcast-episodio-4-ritmo-sostenible-y-codigo-legacy/</guid><description>&lt;p>En el episodio de hoy, aparcamos el formato tradicional de invitados para escuchar un fragmento de una interesantísima discusión surgida durante uno de los trainings sobre Legacy Code de Exeal. ¿Qué cualidades definen la naturaleza del código legacy? ¿Qué factores hacen que un código greenfield se convierta en legacy? ¿Qué podemos hacer nosotros como desarrolladores para ponerles freno?&lt;/p></description></item><item><title>#3: Startup y freelancing</title><link>https://www.exeal.com/blog/2020/10/podcast-episodio-3-startup-y-freelancing/</link><pubDate>Fri, 02 Oct 2020 09:24:51 +0200</pubDate><guid>https://www.exeal.com/blog/2020/10/podcast-episodio-3-startup-y-freelancing/</guid><description>&lt;p>En el episodio de hoy nos sumergimos de lleno en el trepidante mundo Startup de la mano de Iván Ruiz, desarrollador de software freelance y CTO en la startup Nannyfy. Iván, que también tiene su carrera en empresas grandes, nos explicará de primera mano las diferencias clave de estos dos mundos, y cantidad de historias extraídas directamente de las trincheras.&lt;/p></description></item><item><title>Reconciliando a producto y tecnología</title><link>https://www.exeal.com/blog/2020/09/reconciliando-a-producto-y-tecnologia/</link><pubDate>Fri, 25 Sep 2020 00:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2020/09/reconciliando-a-producto-y-tecnologia/</guid><description>&lt;p>Uno de los problemas que más a menudo se puede encontrar en casi cualquier compañía de producto tecnológico es: cómo encajar las prioridades de producto, es decir, el desarrollo de nuevas funcionalidades, corregir fallos, etc., con las prioridades tecnológicas, es decir, requisitos no funcionales, modernización de la tecnología, mantenimiento, optimización, etc. En este artículo pretendo explorar este conflicto y exponer patrones y antipatrones basados en mi experiencia como desarrollador y &lt;em>technical coach&lt;/em> (por lo cual aviso de que el artículo puede ser algo &lt;em>opinionated&lt;/em>).&lt;/p></description></item><item><title>Gestiona los errores de tus APIs web como un pro</title><link>https://www.exeal.com/blog/2020/09/gestiona-los-errores-de-tus-apis-web-como-un-pro/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2020/09/gestiona-los-errores-de-tus-apis-web-como-un-pro/</guid><description>&lt;p>La gestión de errores en APIs web es un punto clave a la hora de diseñar nuestra API y &lt;strong>darle un punto de calidad de vida a los usuarios de la misma&lt;/strong>.&lt;/p></description></item><item><title>Estandarizar la arquitectura: ¿buena o mala idea?</title><link>https://www.exeal.com/blog/2020/08/estandarizar-la-arquitectura-buena-o-mala-idea/</link><pubDate>Thu, 06 Aug 2020 00:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2020/08/estandarizar-la-arquitectura-buena-o-mala-idea/</guid><description>&lt;p>Reciéntemente en el equipo con el que trabajo actualmente, tuvimos una interesante discusión de diseño de una de nuestras APIs web.&lt;/p></description></item><item><title>#2: Historia de una transformación cultural</title><link>https://www.exeal.com/blog/2020/07/podcast-episodio-2-historia-de-una-transformacion-cultural/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2020/07/podcast-episodio-2-historia-de-una-transformacion-cultural/</guid><description>&lt;p>En el episodio de hoy, los compañeros de la empresa Voxel Group, de Barcelona, nos cuentan cómo han sido impulsores de una transformación cultural hacia una cultura de aprendizaje continuo, y han diseñado y ejecutado una estrategia de formación para todos los miembros del departamento de IT. Josep, Beth, Xavi, Meri, Vicenç y Ramón nos cuentan cómo lo están haciendo, y todos los retos a los que se han enfrentado y continúan enfrentándose, cómo viven el proceso en el día a día, desde dentro, tanto a nivel profesional, como personal.&lt;/p></description></item><item><title>#1: Consultoría de software en Alemania</title><link>https://www.exeal.com/blog/2020/06/podcast-episodio-1-consultoria-de-software-en-alemania/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0200</pubDate><guid>https://www.exeal.com/blog/2020/06/podcast-episodio-1-consultoria-de-software-en-alemania/</guid><description>&lt;p>En nuestro primer episodio, aprenderemos de la mano de nuestro invitado Federico Sörenson acerca del mundo de la consultoría de software, especialmente en Alemania, donde Federico ha desarrollado la totalidad de su carrera profesional. Descubriremos qué hay de cierto en los &amp;ldquo;típicos tópicos&amp;rdquo; de la cultura alemana, cómo afectan a los equipos de IT, por qué valores se rigen las relaciones empresariales, a la par que conocemos más cómo es el día a día de un ingeniero de software fuera de nuestras fronteras.&lt;/p></description></item></channel></rss>